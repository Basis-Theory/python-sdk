# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from .raw_client import AsyncRawNetworkTokensClient, RawNetworkTokensClient


class NetworkTokensClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawNetworkTokensClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawNetworkTokensClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawNetworkTokensClient
        """
        return self._raw_client

    def create(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from basis_theory import BasisTheory
        client = BasisTheory(correlation_id="YOUR_CORRELATION_ID", api_key="YOUR_API_KEY", )
        client.network_tokens.create()
        """
        _response = self._raw_client.create(request_options=request_options)
        return _response.data


class AsyncNetworkTokensClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawNetworkTokensClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawNetworkTokensClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawNetworkTokensClient
        """
        return self._raw_client

    async def create(self, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from basis_theory import AsyncBasisTheory
        import asyncio
        client = AsyncBasisTheory(correlation_id="YOUR_CORRELATION_ID", api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.network_tokens.create()
        asyncio.run(main())
        """
        _response = await self._raw_client.create(request_options=request_options)
        return _response.data
